{"version":3,"sources":["containers/Auth/Register/Register.js","containers/Auth/Register/Register.module.css"],"names":["Register","state","form_data","full_name","elementType","elementConfig","type","placeholder","autoFocus","label","value","validation","required","maxLength","valid","touched","email","isEmail","password","minLength","isShowPassword","confirm_password","loading","formIsValid","isChecked","message","onCheckValidity","isValid","trim","length","onChangeHandler","event","inputIdentifier","updatedFormData","inputElement","target","key","setState","onSubmit","e","preventDefault","valueInput","AuthService","register","then","res","data","status","catch","err","console","log","showPasswordHandler","inputName","checked","formElementArr","this","push","id","config","form","map","item","invalid","shouldValidate","changed","onChange","style","textAlign","disabled","btnType","className","classes","messageType","Component","module","exports"],"mappings":"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","file":"static/js/5.0ff09d0f.chunk.js","sourcesContent":["import React , { Component } from 'react';\nimport classes from './Register.module.css';\nimport Input from '../../../components/UI/Input/Input';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Button from '../../../components/UI/Button/Button';\nimport AuthService from './../../../services/auth_service';\nimport ErrorMessage from '../../../components/UI/ErrorMessage/ErrorMessage';\n\nclass Register extends Component {\n\n    state = {\n        form_data: {\n            full_name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Enter Fullname',\n                    autoFocus: true \n                },\n                label: 'Fullname',\n                value: '',\n                validation: {\n                    required: true,\n                    \n                    maxLength: 20\n                },\n                valid: false,\n                touched: false \n            },\n            email: {\n                elementType: 'email',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Enter Email'\n                },\n                label: 'Email',\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true \n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Enter Password',\n                    minLength: 5,\n                    maxLength: 5\n                },\n                label: 'Password',\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false,\n                isShowPassword: true\n            },\n            confirm_password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Confirm Password',\n                    minLength: 5,\n                    maxLength: 5\n                },\n                label: 'Confirm Password',\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false,\n                isShowPassword: true\n            }\n        },\n        loading: false,\n        formIsValid: false,\n        isChecked: false,\n        message: {\n            type: '',\n            value: ''\n        }\n    }\n\n    onCheckValidity = (value, validation) => {\n        let isValid = true;\n\n        if(validation.required){\n            isValid = value.trim() !== \"\" && isValid;\n        }\n\n        if(validation.minLength){\n            isValid = value.length >= validation.minLength && isValid;\n        }\n\n        if(validation.maxLength){\n            isValid = value.length <= validation.maxLength && isValid;\n        }\n\n        return isValid;\n    }\n\n    onChangeHandler = (event, inputIdentifier) => {\n        const updatedFormData = {\n            ...this.state.form_data\n        }\n\n        const inputElement = updatedFormData[inputIdentifier];\n        inputElement.value = event.target.value;\n        inputElement.valid = this.onCheckValidity(event.target.value, inputElement.validation)\n        inputElement.touched = true;\n\n        updatedFormData[inputIdentifier] = inputElement;\n\n        let formIsValid = true;\n        for(let key in updatedFormData){\n            formIsValid = updatedFormData[key].valid && formIsValid\n        }\n\n        this.setState({\n            form_data: updatedFormData,\n            formIsValid: formIsValid\n        })\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        let form_data = {};\n        this.setState({ message: '' });\n\n        for(let valueInput in this.state.form_data){\n            form_data[valueInput] = this.state.form_data[valueInput].value\n        }\n\n        if(form_data.password !== form_data.confirm_password){\n            this.setState({\n                message: {\n                    type: 'error',\n                    value: 'Your password and confirmation password do not match.'\n                }\n            });\n            return;\n        }\n\n        AuthService.register(form_data)\n                    .then(res => {\n                        \n                        if(res.data.status){\n                            this.setState({\n                                message: {\n                                    type: 'success',\n                                    value: 'Register success'\n                                }\n                            })\n                        }else{\n                            this.setState({\n                                message: {\n                                    type: 'error',\n                                    value: res.data.message\n                                }\n                            })\n                        }\n                    })\n                    .catch(err => {\n                        console.log(err)\n                    })\n    }\n\n    showPasswordHandler = (event) => {\n        let updatedFormData = {\n            ...this.state.form_data,\n        }\n       \n        for(let inputName in updatedFormData){\n           if(updatedFormData[inputName].isShowPassword){\n               updatedFormData[inputName] = {\n                   ...updatedFormData[inputName],\n                   elementConfig: {\n                       ...updatedFormData[inputName].elementConfig,\n                       type: event.target.checked ? 'text' : 'password'\n                   }\n               }\n           }else{\n               updatedFormData[inputName] = {\n                   ...updatedFormData[inputName]\n               }\n           }\n        }\n\n         this.setState({\n            form_data: updatedFormData,\n            isChecked: event.target.checked\n        })\n\n\n    }\n\n\n    render(){\n        let formElementArr = [];\n\n        for(let key in this.state.form_data) {\n            formElementArr.push({\n                id: key,\n                config: this.state.form_data[key]\n            })\n        }\n\n        let form = (\n            <form onSubmit={this.onSubmit}>\n                {\n                    formElementArr.map(item => (\n                        <Input \n                            key={item.id}\n                            label={item.config.label}\n                            elementType={item.config.elementType}\n                            elementConfig={item.config.elementConfig}\n                            value={item.config.value}\n                            invalid={!item.config.valid}\n                            shouldValidate={item.config.validation}\n                            touched={item.config.touched}\n                            changed={(event) => this.onChangeHandler(event, item.id)}\n                        />\n                    ))\n                }\n\n                <label>\n                <input \n                    type=\"checkbox\" \n                    checked={this.state.isChecked} \n                    onChange={this.showPasswordHandler} /> \n                    Show Password\n                </label>\n\n                <div style={{ textAlign: 'right' }}>\n                    {\n                        this.state.loading ? (\n                            <div><Spinner /> </div>\n                        ) : (\n                            <Button disabled={!this.state.formIsValid} btnType=\"Primary\">SUBMIT</Button>\n                        )\n                    }\n                </div>\n                \n            </form>\n        )\n\n\n        return(\n            <div className={classes.Register}>\n                <h2>Register</h2>\n                {form}\n                { this.state.message ? <ErrorMessage messageType={this.state.message.type}> {this.state.message.value} </ErrorMessage> : null }\n            </div>\n        )\n    }\n}\n\nexport default Register;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Register\":\"Register_Register__2zmNm\"};"],"sourceRoot":""}
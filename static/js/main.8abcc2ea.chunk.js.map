{"version":3,"sources":["components/Navigation/SideDrawer/SideDrawer.module.css","components/UI/Input/Input.module.css","components/UI/ErrorMessage/ErrorMessage.module.css","components/Navigation/Toolbar/Toolbar.module.css","components/Navigation/NavigationItems/NavigationItems.module.css","components/Navigation/NavigationItems/NavigationItem/NavigationItem.module.css","components/UI/Button/Button.module.css","components/Logo/Logo.module.css","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.module.css","components/UI/Backdrop/Backdrop.module.css","hoc/Layout/Layout.module.css","containers/Auth/Login/Login.module.css","components/UI/Spinner/Spinner.module.css","containers/Todo/Todo.module.css","components/Todo/Controls/Controls.module.css","components/Todo/Lists/Lists.module.css","components/Todo/Lists/Items/Items.module.css","assets/img/empty.svg","containers/Auth/Logout/Logout.module.css","containers/Auth/Register/Register.module.css","components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Logo/Logo.js","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.js","components/Navigation/Toolbar/Toolbar.js","components/UI/Backdrop/Backdrop.js","components/Navigation/SideDrawer/SideDrawer.js","hoc/Layout/Layout.js","components/UI/Button/Button.js","components/UI/Input/Input.js","components/UI/Spinner/Spinner.js","components/UI/ErrorMessage/ErrorMessage.js","services/axios-service.js","services/auth-header.js","services/auth_service.js","store/actions/auth.js","store/actions/types.js","services/user-service.js","containers/Auth/Login/Login.js","components/Todo/Controls/Controls.js","components/Todo/Lists/Items/Items.js","components/Todo/Lists/Lists.js","components/UI/Icons/Empty.js","containers/Todo/Todo.js","store/actions/todo.js","containers/Auth/Logout/Logout.js","containers/Auth/Register/Register.js","App.js","serviceWorker.js","store/reducers/auth.js","store/reducers/todo.js","index.js"],"names":["module","exports","NavigationItem","props","className","classes","exact","to","link","activeClassName","active","children","NavigationItems","this","isLogin","Component","Logo","DrawerToggle","onClick","clicked","Toolbar","toggleHandler","isShowSideDrawer","DesktopOnly","Backdrop","show","SideDrawer","sideDrawerClasses","Close","open","Open","Fragment","closed","join","style","marginTop","Layout","state","sideDrawerCloseHandler","setState","sideDrawerToggleHandler","prevState","Content","Button","disabled","btnType","Input","inputElement","inputClasses","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","elementConfig","value","onChange","changed","Label","label","textAlign","color","Spinner","ErrorMessage","messageClasses","messageType","Error","Success","Messaage","instance","Axios","create","baseURL","authHeader","user","JSON","parse","localStorage","getItem","token","Authorization","email","password","post","headers","full_name","then","res","catch","err","console","log","logout","dispatch","type","authService","data","removeItem","error","logoutFail","get","id","delete","title","Login","form_data","placeholder","autoFocus","validation","required","isEmail","valid","formIsValid","loading","errorMessage","onCheckValidity","rules","isValid","trim","onChangeHandler","event","inputIdentifier","updatedFormData","selectedFormElement","target","key","onSubmitHandler","preventDefault","onAuthentication","formElementArr","config","form","onSubmit","map","item","message","connect","auth","login","setItem","stringify","results","actions","withRouter","todos","todo","completed","filter","checked","Controls","length","submited","inputValue","Items","itemClasses","Checked","deleted","Lists","onChecklist","onDeletedTodo","Empty","display","justifyContent","alignItems","height","flexDirection","src","Icon","width","alt","text","Todo","onChecklistHandler","onCheckedToggle","onDeleteHandler","onDeleteTodo","onSaveTodoHandler","onCreateTodo","onFetchTodo","listTodo","background","userService","getTodos","deleteTodo","todo_delete_success","newTodo","checkedToggle","todo_checked_success","Logout","Register","maxLength","minLength","isShowPassword","confirm_password","isChecked","e","valueInput","AuthService","register","status","showPasswordHandler","inputName","App","checkAuth","routes","path","component","Boolean","window","location","hostname","match","initialState","currentUser","reducer","action","getCurrentUser","updatedTodo","el","todoIndex","findIndex","copyTodos","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","authReducer","todoReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8abcc2ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SideDrawer\":\"SideDrawer_SideDrawer__3kXLK\",\"Open\":\"SideDrawer_Open__1tCv1\",\"Close\":\"SideDrawer_Close__9j7x-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Messaage\":\"ErrorMessage_Messaage__345HG\",\"Error\":\"ErrorMessage_Error__O0bqz\",\"Success\":\"ErrorMessage_Success__3KVLX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Toolbar_Toolbar__ApScI\",\"DesktopOnly\":\"Toolbar_DesktopOnly__LuPaL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItems\":\"NavigationItems_NavigationItems__1fnFX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItem\":\"NavigationItem_NavigationItem__2SpXc\",\"active\":\"NavigationItem_active__2v2td\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3gFiX\",\"Primary\":\"Button_Primary__38CGK\",\"enable\":\"Button_enable__1Clcb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Logo_Logo__1N0xH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DrawerToggle\":\"DrawerToggle_DrawerToggle__m405X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__3j6VK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout_Content__3H3X8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Login_Login__38Sbn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spinner\":\"Spinner_Spinner__BWqNs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Todo\":\"Todo_Todo__3tqSC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"Controls_Controls__1fKts\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Lists\":\"Lists_Lists__3wWSc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Checked\":\"Items_Checked__1gXfg\"};","module.exports = __webpack_public_path__ + \"static/media/empty.4652bf9d.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logout\":\"Logout_Logout__1oCs1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Register\":\"Register_Register__2zmNm\"};","import React from 'react';\nimport classes from './NavigationItem.module.css';\nimport { NavLink } from 'react-router-dom';\n\nconst NavigationItem = (props) => {\n    return (\n        <li className={classes.NavigationItem}>\n            <NavLink exact to={props.link} activeClassName={classes.active}>{props.children}</NavLink>\n        </li>\n    )\n}\n\nexport default NavigationItem\n","import React, { Component } from 'react';\nimport classes from './NavigationItems.module.css';\nimport NavigationItem from './NavigationItem/NavigationItem';\n\nclass NavigationItems extends Component {\n   \n\n    render(){\n        let navigations = null;\n\n        if(this.props.isLogin){\n            navigations = (\n                <ul className={classes.NavigationItems}>\n                    <NavigationItem link=\"/\"> Todo </NavigationItem>\n                    <NavigationItem link=\"/logout\"> Logout </NavigationItem>\n                </ul>\n            )\n        }else{\n            navigations = (\n                <ul className={classes.NavigationItems}>\n                    <NavigationItem link=\"/\"> Login </NavigationItem>\n                    <NavigationItem link=\"/register\"> Register </NavigationItem>\n                </ul>\n            )\n        }\n\n        return navigations;\n    }\n    \n}\n\nexport default NavigationItems\n","import React from 'react';\nimport classes from './Logo.module.css';\n\nconst Logo = () => {\n    return (\n        <div className={classes.Logo}>\n            <div>Todo's App</div>\n        </div>\n    )\n}\n\nexport default Logo\n","import React from 'react';\nimport classes from './DrawerToggle.module.css';\n\nconst DrawerToggle = ( props ) => {\n    return (\n        <div className={classes.DrawerToggle} onClick={props.clicked}>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    )\n}\n\nexport default DrawerToggle\n","import React from 'react';\nimport classes from './Toolbar.module.css';\nimport NavigationItems from './../NavigationItems/NavigationItems';\nimport Logo from '../../Logo/Logo';\nimport DrawerToggle from '../SideDrawer/DrawerToggle/DrawerToggle';\n\nconst Toolbar = (props) => {\n   \n    return (\n        <header className={classes.Toolbar}>\n            <DrawerToggle clicked={props.toggleHandler} />\n            {!props.isShowSideDrawer ? <Logo /> : null } \n            <nav className={classes.DesktopOnly}>\n               <NavigationItems isLogin={props.isLogin} />\n            </nav>\n        </header>\n    )\n}\n\nexport default Toolbar;","import React from 'react';\nimport classes from './Backdrop.module.css';\n\nconst Backdrop = (props) => props.show ? <div className={classes.Backdrop} onClick={props.clicked}></div> : null\n\nexport default Backdrop\n","import React from 'react'\nimport Logo from '../../Logo/Logo'\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport classes from './SideDrawer.module.css';\nimport Backdrop from './../../UI/Backdrop/Backdrop';\n\nconst SideDrawer = (props) => {\n    let sideDrawerClasses = [classes.SideDrawer, classes.Close];\n\n    if(props.open){\n        sideDrawerClasses = [classes.SideDrawer, classes.Open]\n    }\n\n    return (\n        <React.Fragment>\n            <Backdrop show={props.open} clicked={props.closed} />\n            <div className={sideDrawerClasses.join(' ')} onClick={props.closed}>\n                <Logo />\n                <nav style={{ marginTop: '20px' }}>\n                    <NavigationItems isLogin={props.isLogin} />\n                </nav>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default SideDrawer\n","import React , {Component } from 'react';\nimport Toolbar from '../../components/Navigation/Toolbar/Toolbar';\nimport SideDrawer from '../../components/Navigation/SideDrawer/SideDrawer';\nimport classes from './Layout.module.css';\n\nclass Layout extends Component {\n    state = {\n        isShowSideDrawer: false\n    }\n\n    sideDrawerCloseHandler = () => {\n        this.setState({ isShowSideDrawer: false })\n    }\n\n    sideDrawerToggleHandler = () => {\n        this.setState(prevState => {\n            return {\n                isShowSideDrawer: !prevState.isShowSideDrawer\n            }\n        })\n    }\n\n    render() {\n        \n        return(\n            <React.Fragment>\n                <Toolbar \n                    isLogin={this.props.isLogin}\n                    toggleHandler={this.sideDrawerToggleHandler} \n                    isShowSideDrawer={this.state.isShowSideDrawer} />\n                <SideDrawer \n                    isLogin={this.props.isLogin}\n                    open={this.state.isShowSideDrawer}\n                    closed={this.sideDrawerCloseHandler} />\n                <main className={classes.Content}>\n                    {this.props.children}\n                </main>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Layout;","import React from 'react';\nimport classes from './Button.module.css';\n\nconst Button = (props) => {\n    return (\n        <button \n            disabled={props.disabled}\n            className={[classes.Button, classes[props.btnType]].join(' ')}\n            onClick={props.clicked} > {props.children} </button>\n    )\n}\n\nexport default Button;\n","import React from 'react';\nimport classes from './Input.module.css';\n\nconst Input = ( props ) => {\n    let inputElement = null, error_message = null;\n    \n    let inputClasses = [classes.InputElement];\n\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch(props.elementType){\n\n        case ('input') :\n            inputElement = (\n                <input {...props.elementConfig}\n                    value={props.value}\n                    className={inputClasses.join(' ')} \n                    onChange={props.changed}/>\n            )\n        break;\n\n        default :\n         inputElement = ( <input {...props.elementConfig}\n            value={props.value}\n            className={inputClasses.join(' ')} \n            onChange={props.changed}/> )\n\n\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            <div style={{textAlign: 'right'}}>\n                <span style={{color: 'red'}} >{error_message}</span>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Input\n","import React from 'react';\nimport classes from './Spinner.module.css';\n\nconst Spinner = () => {\n    return (\n        <div className={classes.Spinner}></div>\n    )\n}\n\nexport default Spinner;\n","import React from 'react';\nimport classes from './ErrorMessage.module.css';\n\nconst ErrorMessage = (props) => {\n    let messageClasses = null;\n\n    if(props.messageType === 'error'){\n        messageClasses = classes.Error\n    }\n\n    if(props.messageType === 'success'){\n        messageClasses = classes.Success;\n    }\n\n\n    return (\n        <div className={classes.Messaage} >\n            <span className={messageClasses}> {props.children} </span>\n        </div>\n    )\n}\n\nexport default ErrorMessage\n","import Axios from 'axios';\n\nconst instance = Axios.create({\n    baseURL: process.env.NODE_ENV === 'development' ? 'http://localhost:8000/api' : 'https://resource-api.alfarisilab.com/api'\n});\n\nexport default instance;","export default function authHeader() {\n    const user = JSON.parse(localStorage.getItem('user'));\n\n    if(user && user.token){\n        return { Authorization: 'Bearer '+user.token }\n    }else{\n        return { }\n    }\n\n}","import Axios from './axios-service';\nimport authHeader from './auth-header';\n\nclass AuthService {\n\n    login(email, password){\n        return Axios.post('/login', { email, password });\n    }\n\n    logout(){\n        return Axios.post(`/logout`, {}, { headers: authHeader() })\n    }\n    \n    register({ full_name, email, password }) {\n        return Axios\n                .post(`/register`, {\n                    full_name,\n                    email,\n                    password\n                })\n                .then(res => {\n                    return res\n                })\n                .catch(err => {\n                    console.log(err)\n                })\n    }\n\n    getCurrentUser() {\n        return JSON.parse( localStorage.getItem('user') )\n    }\n\n}\n\nexport default new AuthService();","import * as actionTypes from './types';\nimport authService from './../../services/auth_service';\n\nexport const authCheckState = () => {\n    return {\n        type: actionTypes.CHECK_AUTH\n    }\n}\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    }\n}\n\nexport const authSuccess = (data, token) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        data: data,\n        token: token\n    }\n}\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    }\n}\n\nexport const logoutStart = () => {\n    return {\n        type: actionTypes.LOGOUT_START\n    }\n}\n\nexport const logoutSuccess = ( data ) => {\n    localStorage.removeItem('user');\n    return {\n        type: actionTypes.LOGOUT_SUCCESS,\n        data: data\n    }\n}\n\nexport const logoutFail = (err) => {\n    return {\n        type: actionTypes.LOGOUT_FAIL,\n        error: err\n    }\n}\n\nexport const auth = (email, password) => {\n    return dispatch => {\n        dispatch(authStart());\n        authService.login(email, password)\n                   .then(res => {\n                        localStorage.setItem('user', JSON.stringify(res.data));\n                        dispatch(authSuccess(res.data.results, res.data.token))\n                   })\n                   .catch(err => {\n                        dispatch(authFail(err))\n                   })\n    }\n}\n\nexport const logout = () => {\n    return dispatch => {\n        dispatch(logoutStart());\n        authService.logout()\n                .then(res => {\n                    dispatch(logoutSuccess(res.data))\n                })\n                .catch(err => {\n                    dispatch(logoutFail(err))\n                })\n    }\n}","export const CHECK_AUTH = 'CHECK_AUTH';\n\nexport const AUTH_START = 'AUTH_START';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const AUTH_FAIL = 'AUTH_FAIL';\n\nexport const LOGOUT_START = 'LOGOUT_START';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const LOGOUT_FAIL = 'LOGOUT_FAIL';\n\nexport const TODO_FETCH_START = 'TODO_FETCH_START';\nexport const TODO_FETCH_SUCCESS = 'TODO_FETCH_SUCCESS';\nexport const TODO_FETCH_FAIL = 'TODO_FETCH_FAIL';\n\nexport const TODO_DELETE_START = 'TODO_DELETE_START';\nexport const TODO_DELETE_SUCCESS = 'TODO_DELETE_SUCCESS';\nexport const TODO_DELETE_FAIL = 'TODO_DELETE_FAIL';\n\nexport const TODO_ADD_START = 'TODO_ADD_START';\nexport const TODO_ADD_SUCCESS = 'TODO_ADD_SUCCESS';\nexport const TODO_ADD_FAIL = 'TODO_ADD_FAIL';\n\nexport const TODO_CHECKED_START = 'TODO_CHECKED_START';\nexport const TODO_CHECKED_SUCCESS = 'TODO_CHECKED_SUCCESS';\nexport const TODO_CHECKED_FAIL = 'TODO_CHECKED_FAIL';","import Axios from './axios-service';\nimport authHeader from './auth-header';\n\nclass UserService {\n    getTodos(){\n        return Axios.get('/todo', { headers: authHeader() });\n    }\n\n    deleteTodo(id){\n        return Axios.delete('/todo/' + id , { headers: authHeader() })\n    }\n\n    newTodo(title){\n        return Axios.post('/todo', {\n            title: title\n        }, { headers: authHeader() })\n    }\n\n    checkedToggle(id){\n        return Axios.get('/toggle_checked/' + id , { headers: authHeader() })\n    }\n}\n\nexport default new UserService();\n\n\n\n","import React , { Component } from 'react';\nimport classes from './Login.module.css';\nimport Button from '../../../components/UI/Button/Button';\nimport Input from '../../../components/UI/Input/Input';\nimport Spinner from './../../../components/UI/Spinner/Spinner';\nimport { withRouter } from 'react-router-dom'\nimport ErrorMessage from '../../../components/UI/ErrorMessage/ErrorMessage';\nimport { connect } from 'react-redux';\nimport * as actions from './../../../store/actions/index';\n\nclass Login extends Component {\n\n    state = {\n        form_data: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Enter email',\n                    autoFocus: true\n                },\n                label: 'Email',\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password:{\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Enter password'\n                },\n                label: 'Password',\n                value: '',\n                validation: {\n                    required: true \n                },\n                valid: false,\n                touched: false\n            }           \n        },\n        formIsValid: false,\n        loading: false,\n        errorMessage: ''\n    }\n\n    onCheckValidity = (value, rules) => {\n        let isValid = true;\n\n        if(rules.required) {\n            isValid = value.trim() !== '' && isValid\n        }\n\n        return isValid;\n    }\n\n    onChangeHandler = (event, inputIdentifier) => {\n        const updatedFormData = {\n            ...this.state.form_data\n        };\n\n        const selectedFormElement = {\n            ...updatedFormData[inputIdentifier]\n        }\n        selectedFormElement.value = event.target.value;\n        selectedFormElement.valid = this.onCheckValidity(event.target.value, selectedFormElement.validation);\n        selectedFormElement.touched = true;\n        updatedFormData[inputIdentifier] = selectedFormElement;\n        \n        //\n        let formIsValid = true;\n        for(let key in updatedFormData){\n            formIsValid = updatedFormData[key].valid && formIsValid\n        }\n        \n        this.setState({\n            form_data: updatedFormData,\n            formIsValid: formIsValid\n        });\n    }\n\n    onSubmitHandler = ( event ) => {\n        event.preventDefault();\n        this.props.onAuthentication(this.state.form_data.email.value, this.state.form_data.password.value); \n    }\n\n\n    render() {\n        let formElementArr = [], errorMessage = null;\n\n        for(let key in this.state.form_data){\n            formElementArr.push({\n                id: key,\n                config: this.state.form_data[key]\n            })\n        }\n\n        let form = (\n            <form onSubmit={this.onSubmitHandler}>\n                    {\n                        formElementArr.map(item => (\n                            <Input \n                                key={item.id}\n                                label={item.config.label}\n                                elementType={item.config.elementType}\n                                elementConfig={item.config.elementConfig}\n                                value={item.config.value}\n                                invalid={!item.config.valid}\n                                shouldValidate={item.config.validation}\n                                touched={item.config.touched}\n                                changed={(event) => this.onChangeHandler(event, item.id) }\n                            />\n                        ))\n                    }\n                    <div style={{ textAlign: 'right' }}>\n                       { \n                           this.props.loading ? (\n                               <div> <Spinner /> </div>\n                           ) : (\n                            <Button disabled={!this.state.formIsValid} btnType=\"Primary\" >SUBMIT</Button>\n                           )\n                        } \n                    </div>\n            </form>\n        );\n\n        if(this.props.error){\n            errorMessage = (\n                <ErrorMessage messageType=\"Error\"> {this.props.error.message} </ErrorMessage>\n            )\n        }\n\n        return (\n            <div className={classes.Login}>\n                <h2>Log in</h2>\n                {form}\n                {errorMessage}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuthentication: (email, password) => dispatch( actions.auth(email, password) )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)( withRouter(Login) )  ;","import React from 'react';\nimport classes from './Controls.module.css';\nimport { connect } from 'react-redux';\n\nconst Controls = (props) => {\n    let completed = props.todos.filter(item => item.checked);\n\n    return (\n        <div className={classes.Controls}>\n            \n            <h2>My Day</h2>\n            \n            <h5>{completed.length} / {props.todos.length} <br/>Lists </h5>\n            <div className=\"clearfix\"></div>\n            <p>Hallo, { JSON.parse(localStorage.getItem('user')).results.full_name }  </p>\n            <form onSubmit={props.submited}>\n                <input type=\"text\" placeholder=\"Enter List\" value={props.inputValue} onChange={props.changed} />\n                <button type=\"submit\">ADD</button>\n                <div className=\"clearfix\"></div>\n            </form>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        todos: state.todo.todos \n    }\n}\n\nexport default connect(mapStateToProps)(Controls);\n","import React from 'react';\nimport classes from './Items.module.css';\n\nconst Items = (props) => {\n    let itemClasses = null;\n\n    if(props.checked){\n        itemClasses = classes.Checked\n    }\n\n    return (\n        <li className={itemClasses}>\n            <div onClick={props.clicked}>{props.title}</div> \n            <span onClick={props.deleted}>x</span> \n        </li>\n    )\n}\n\nexport default Items\n","import React from 'react';\nimport classes from './Lists.module.css';\nimport Items from './Items/Items';\n\nconst Lists = (props) => {\n\n    return (\n        <ul className={classes.Lists}>\n            {\n                props.todos.length > 0 ? props.todos.map(todo => (\n                    <Items \n                        key={todo.id}\n                        title={todo.title} \n                        checked={todo.checked} \n                        clicked={() => props.onChecklist(todo.id)} \n                        deleted={() => props.onDeletedTodo(todo.id)} />\n                )) : null\n            }\n        </ul>\n    )\n}\n\nexport default Lists\n","import React from 'react';\nimport Icon from './../../../assets/img/empty.svg';\n\nconst Empty = (props) => {\n    return (\n        <div style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            height: '300px',\n            flexDirection: 'column'\n        }}>\n        <img src={Icon} width=\"150px\" alt=\"empty image\" />\n        <p>{props.text}</p>\n        </div>\n    );\n};\n\nexport default Empty;","import React , { Component } from 'react';\nimport classes from './Todo.module.css';\nimport { connect } from 'react-redux'\nimport Controls from '../../components/Todo/Controls/Controls';\nimport Lists from '../../components/Todo/Lists/Lists';\nimport * as actions from './../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport Empty from '../../components/UI/Icons/Empty';\n\n\nclass Todo extends Component {\n\n    state = {\n        value: ''\n    }\n\n    componentDidMount() {\n        this.props.onFetchTodo()\n       \n    }\n\n    onChecklistHandler = (id) => {\n        this.props.onCheckedToggle( id )\n    }\n\n    onDeleteHandler = ( id ) => {\n        this.props.onDeleteTodo(id);\n    }\n\n    onSaveTodoHandler = (event) => {\n        event.preventDefault();\n        let inputValue = this.state.value.trim();\n        \n        if(inputValue !== \"\") {\n            this.props.onCreateTodo(inputValue)\n            this.setState({\n                value: ''\n            })\n        }\n\n\n        return false;\n    }\n\n    onChangeHandler = (event) => {\n        this.setState({\n            value: event.target.value\n        });\n    }\n\n    render(){\n        let listTodo = null;\n\n        if(this.props.todos.length > 0) {\n            listTodo = (\n                <Lists \n                    todos={this.props.todos} \n                    onChecklist={this.onChecklistHandler} \n                    onDeletedTodo={this.onDeleteHandler} />\n            );\n        }else {\n            listTodo = <Empty text=\"Today List Empty\" />\n        }\n\n\n        if(this.props.loading){\n            listTodo = <Spinner />\n        }\n\n        return (\n            <div className={classes.Todo}>\n                <Controls \n                    submited={this.onSaveTodoHandler} \n                    inputValue={this.state.value}\n                    changed={this.onChangeHandler} />\n                <div style={{ background: '#ccc' }}>\n                     {listTodo}\n                </div>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        auth: state.auth,\n        todos: state.todo.todos,\n        loading: state.todo.loading\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchTodo: () => dispatch( actions.todo_fetch( ) ) ,\n        onDeleteTodo: ( id ) => dispatch( actions.todo_delete( id ) ),\n        onCreateTodo: (title) => dispatch( actions.todo_add(title) ),\n        onCheckedToggle: (id) => dispatch( actions.todo_checked(id))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todo) ","import * as actionTypes from './types';\nimport userService from './../../services/user-service';\n\nexport const todo_fetch_start = () => {\n    return {\n        type: actionTypes.TODO_FETCH_START\n    }\n}\n\nexport const todo_fetch_success = ( data ) => {\n    return {\n        type: actionTypes.TODO_FETCH_SUCCESS,\n        data: data\n    }\n}\n\nexport const todo_fetch_fail = (error) => {\n    return {\n        type: actionTypes.TODO_FETCH_FAIL,\n        error: error\n    }\n}\n\nexport const todo_delete_start = () => {\n    return {\n        type: actionTypes.TODO_DELETE_START\n    }\n}\n\nexport const todo_delete_success = (id) => {\n    return {\n        type: actionTypes.TODO_DELETE_SUCCESS,\n        id: id \n    }\n}\n\nexport const todo_delete_fail = (error) => {\n    return {\n        type: actionTypes.TODO_DELETE_FAIL,\n        error: error\n    }\n}\n\n//add\nexport const todo_add_start = () => {\n    return {\n        type: actionTypes.TODO_ADD_START\n    }\n}\n\nexport const todo_add_success = (data) => {\n    return {\n        type: actionTypes.TODO_ADD_SUCCESS,\n        data: data \n    }\n}\n\nexport const todo_add_fail = (error) => {\n    return {\n        type: actionTypes.TODO_ADD_FAIL,\n        error: error\n    }\n}\n//\n\n\n//Checked\nexport const todo_checked_start = () => {\n    return {\n        type: actionTypes.TODO_CHECKED_START\n    }\n}\n\nexport const todo_checked_success = ( id ) => {\n    return {\n        type: actionTypes.TODO_CHECKED_SUCCESS,\n        id: id\n    }\n}\n\nexport const todo_checked_fail = ( error ) => {\n    return {\n        type: actionTypes.TODO_CHECKED_FAIL,\n        error: error\n    }\n}\n\nexport const todo_fetch = () => {\n    return dispatch => {\n        dispatch( todo_fetch_start() );\n        userService.getTodos()\n                    .then(res => {\n                        dispatch( todo_fetch_success(res.data.results) )\n                    })\n                    .catch(err => {\n                        dispatch( todo_fetch_fail(err) )\n                    })\n    }\n}\n\nexport const todo_delete = (id) => {\n    return dispatch => {\n        dispatch( todo_delete_start() );\n        userService.deleteTodo(id)\n                   .then(res => {\n                       dispatch( todo_delete_success(id));\n                   })\n                   .catch(err => {\n                       dispatch( todo_delete_fail(err) )\n                   });\n    }\n}\n\nexport const todo_add = ( title ) => {\n    return dispatch => {\n        dispatch( todo_add_start() )\n        userService.newTodo(title)\n                   .then(res => {\n                       dispatch( todo_add_success(res.data.results) )\n                   })\n                   .catch(err => {\n                       dispatch( todo_add_fail(err))\n                   })\n    }\n}\n\nexport const todo_checked = ( id ) => {\n    \n    return dispatch => {\n        dispatch( todo_checked_start() )\n        userService.checkedToggle(id)\n                   .then(res => {\n                        dispatch( todo_checked_success(id) )\n                   })\n                   .catch(err => {\n                       dispatch( todo_checked_fail(err) )\n                   })\n    }\n}","import React, { Component } from 'react';\nimport classes from './Logout.module.css';\nimport { withRouter  } from 'react-router-dom'\nimport Login from '../Login/Login';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport { connect } from 'react-redux';\nimport * as actions from './../../../store/actions/index';\nimport ErrorMessage from '../../../components/UI/ErrorMessage/ErrorMessage';\n\nclass Logout extends Component {\n    componentDidMount(){\n        this.props.logout()\n    }\n\n    render(){\n        \n        let logout = (\n            <div>\n                <ErrorMessage messageType=\"success\">You've successfully logged out of Todo's App. Come back soon! </ErrorMessage>\n                <Login />\n            </div>\n        );\n\n        if(this.props.loading){\n            logout = (\n                <div className={classes.Logout}>\n                    <Spinner />\n                </div>\n            )\n        }\n\n\n        return logout;\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading\n    }\n}\n\nconst dispatchStateToPropd = dispatch => {\n    return {\n        logout: () => dispatch( actions.logout() )\n    }\n}\n\nexport default connect(mapStateToProps, dispatchStateToPropd)(withRouter(Logout))  ;","import React , { Component } from 'react';\nimport classes from './Register.module.css';\nimport Input from '../../../components/UI/Input/Input';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Button from '../../../components/UI/Button/Button';\nimport AuthService from './../../../services/auth_service';\nimport ErrorMessage from '../../../components/UI/ErrorMessage/ErrorMessage';\n\nclass Register extends Component {\n\n    state = {\n        form_data: {\n            full_name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Enter Fullname',\n                    autoFocus: true \n                },\n                label: 'Fullname',\n                value: '',\n                validation: {\n                    required: true,\n                    \n                    maxLength: 20\n                },\n                valid: false,\n                touched: false \n            },\n            email: {\n                elementType: 'email',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Enter Email'\n                },\n                label: 'Email',\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true \n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Enter Password',\n                    minLength: 5,\n                    maxLength: 5\n                },\n                label: 'Password',\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false,\n                isShowPassword: true\n            },\n            confirm_password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Confirm Password',\n                    minLength: 5,\n                    maxLength: 5\n                },\n                label: 'Confirm Password',\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false,\n                isShowPassword: true\n            }\n        },\n        loading: false,\n        formIsValid: false,\n        isChecked: false,\n        message: {\n            type: '',\n            value: ''\n        }\n    }\n\n    onCheckValidity = (value, validation) => {\n        let isValid = true;\n\n        if(validation.required){\n            isValid = value.trim() !== \"\" && isValid;\n        }\n\n        if(validation.minLength){\n            isValid = value.length >= validation.minLength && isValid;\n        }\n\n        if(validation.maxLength){\n            isValid = value.length <= validation.maxLength && isValid;\n        }\n\n        return isValid;\n    }\n\n    onChangeHandler = (event, inputIdentifier) => {\n        const updatedFormData = {\n            ...this.state.form_data\n        }\n\n        const inputElement = updatedFormData[inputIdentifier];\n        inputElement.value = event.target.value;\n        inputElement.valid = this.onCheckValidity(event.target.value, inputElement.validation)\n        inputElement.touched = true;\n\n        updatedFormData[inputIdentifier] = inputElement;\n\n        let formIsValid = true;\n        for(let key in updatedFormData){\n            formIsValid = updatedFormData[key].valid && formIsValid\n        }\n\n        this.setState({\n            form_data: updatedFormData,\n            formIsValid: formIsValid\n        })\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        let form_data = {};\n        this.setState({ message: '' });\n\n        for(let valueInput in this.state.form_data){\n            form_data[valueInput] = this.state.form_data[valueInput].value\n        }\n\n        if(form_data.password !== form_data.confirm_password){\n            this.setState({\n                message: {\n                    type: 'error',\n                    value: 'Your password and confirmation password do not match.'\n                }\n            });\n            return;\n        }\n\n        AuthService.register(form_data)\n                    .then(res => {\n                        \n                        if(res.data.status){\n                            this.setState({\n                                message: {\n                                    type: 'success',\n                                    value: 'Register success'\n                                }\n                            })\n                        }else{\n                            this.setState({\n                                message: {\n                                    type: 'error',\n                                    value: res.data.message\n                                }\n                            })\n                        }\n                    })\n                    .catch(err => {\n                        console.log(err)\n                    })\n    }\n\n    showPasswordHandler = (event) => {\n        let updatedFormData = {\n            ...this.state.form_data,\n        }\n       \n        for(let inputName in updatedFormData){\n           if(updatedFormData[inputName].isShowPassword){\n               updatedFormData[inputName] = {\n                   ...updatedFormData[inputName],\n                   elementConfig: {\n                       ...updatedFormData[inputName].elementConfig,\n                       type: event.target.checked ? 'text' : 'password'\n                   }\n               }\n           }else{\n               updatedFormData[inputName] = {\n                   ...updatedFormData[inputName]\n               }\n           }\n        }\n\n         this.setState({\n            form_data: updatedFormData,\n            isChecked: event.target.checked\n        })\n\n\n    }\n\n\n    render(){\n        let formElementArr = [];\n\n        for(let key in this.state.form_data) {\n            formElementArr.push({\n                id: key,\n                config: this.state.form_data[key]\n            })\n        }\n\n        let form = (\n            <form onSubmit={this.onSubmit}>\n                {\n                    formElementArr.map(item => (\n                        <Input \n                            key={item.id}\n                            label={item.config.label}\n                            elementType={item.config.elementType}\n                            elementConfig={item.config.elementConfig}\n                            value={item.config.value}\n                            invalid={!item.config.valid}\n                            shouldValidate={item.config.validation}\n                            touched={item.config.touched}\n                            changed={(event) => this.onChangeHandler(event, item.id)}\n                        />\n                    ))\n                }\n\n                <label>\n                <input \n                    type=\"checkbox\" \n                    checked={this.state.isChecked} \n                    onChange={this.showPasswordHandler} /> \n                    Show Password\n                </label>\n\n                <div style={{ textAlign: 'right' }}>\n                    {\n                        this.state.loading ? (\n                            <div><Spinner /> </div>\n                        ) : (\n                            <Button disabled={!this.state.formIsValid} btnType=\"Primary\">SUBMIT</Button>\n                        )\n                    }\n                </div>\n                \n            </form>\n        )\n\n\n        return(\n            <div className={classes.Register}>\n                <h2>Register</h2>\n                {form}\n                { this.state.message ? <ErrorMessage messageType={this.state.message.type}> {this.state.message.value} </ErrorMessage> : null }\n            </div>\n        )\n    }\n}\n\nexport default Register;","import React,  { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Layout from './hoc/Layout/Layout';\nimport { Switch, Route, Redirect  } from 'react-router-dom'\nimport Login from './containers/Auth/Login/Login';\nimport Todo from './containers/Todo/Todo';\nimport * as actions from './store/actions/index';\nimport Logout from './containers/Auth/Logout/Logout';\nimport Register from './containers/Auth/Register/Register';\n\nclass App extends Component {\n\n  componentDidMount(){\n    \n    this.props.checkAuth()\n  }\n\n  render() {\n    let routes = (\n      <Switch>\n         <Route path=\"/\" exact component={Login} />\n         <Route path=\"/register\" component={Register} />\n         <Redirect to=\"/\" />\n      </Switch>\n    );\n\n    if(this.props.auth.isLogin){\n     routes = (\n        <Switch>\n            <Route path=\"/\" exact component={Todo} />\n            <Route path=\"/logout\" component={Logout} />\n            <Redirect to=\"/\" />\n        </Switch>\n       );\n    };\n\n    return (\n      <div>\n          <Layout isLogin={this.props.auth.isLogin}>\n            {routes}\n          </Layout>\n      </div>\n    );\n\n  }\n}\n\nconst mapStateToProps = state => {\n    return {\n      auth: state.auth\n    }\n}\n\nconst dispatchStateToProps = dispatch => {\n  return {\n    checkAuth: () => dispatch( actions.authCheckState() )\n  }\n}\n\nexport default connect(mapStateToProps, dispatchStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from './../actions/types';\nimport AuthService from './../../services/auth_service';\n\nconst initialState = {\n    currentUser: null,\n    token: null,\n    isLogin: false,\n    loading: false,\n    error: null\n};\n\nconst reducer = (state = initialState, action) => {\n    switch(action.type)\n    {\n        case actionTypes.AUTH_START:\n            return {\n                ...state,\n                loading: true \n            }\n\n        case actionTypes.AUTH_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                currentUser: action.data,\n                token: action.token,\n                isLogin: true,\n                error: null\n            }\n\n        case actionTypes.AUTH_FAIL:\n            return {\n                ...state,\n                currentUser: null,\n                loading: false,\n                error: action.error\n            }\n\n        case actionTypes.CHECK_AUTH:\n                const user = AuthService.getCurrentUser();\n\n                if(user){\n                    return {\n                        ...state,\n                        isLogin: true,\n                        loading: false\n                    }\n                }\n        \n            return {\n                ...state,\n                isLogin: false,\n                loading: false\n            }\n\n        case actionTypes.LOGOUT_START:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case actionTypes.LOGOUT_SUCCESS:\n            return {\n                ...state,\n                isLogin: false,\n                currentUser: null,\n                loading: false\n            }\n           \n        case actionTypes.LOGOUT_FAIL: \n            return {\n                ...state,\n                isLogin: false,\n                currentUser: null,\n                loading: false,\n                error: action.error\n            }\n            \n        default: \n        return state;\n    }\n}\n\nexport default reducer;","import * as actionTypes from './../actions/types';\n\nconst initialState = {\n    todos: [],\n    loading: null,\n    error: null \n}\n\nconst reducer = ( state = initialState, action ) => {\n    switch(action.type)\n    {\n        case actionTypes.TODO_FETCH_START:\n            return {\n                ...state,\n                loading: true,\n                error: null \n            }\n\n        case actionTypes.TODO_FETCH_SUCCESS:\n            const data = action.data.map(item => {\n                return {\n                    ...item,\n                    checked: item.checked === 'yes' ? true : false\n                }\n            })\n            return {\n                ...state,\n                loading: false,\n                error: null,\n                todos: data\n            }\n        \n        case actionTypes.TODO_FETCH_FAIL:\n            return {\n                ...state,\n                loading: false,\n                error: action.error\n            }\n        \n        case actionTypes.TODO_DELETE_START:\n            return {\n                ...state,\n                error: null\n            }\n        \n        case actionTypes.TODO_DELETE_SUCCESS:\n            const updatedTodo = [...state.todos];\n            const filter    = updatedTodo.filter(el => el.id !== action.id );\n            \n            return {\n                ...state,\n                loading: false,\n                error: null,\n                todos: filter\n            }\n        \n        case actionTypes.TODO_DELETE_FAIL:\n            return {\n                ...state,\n                loading: false,\n                error: action.error\n            }\n        \n        case actionTypes.TODO_ADD_START:\n            return {\n                ...state,\n                loading: true,\n                error: null \n            }\n        \n        case actionTypes.TODO_ADD_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                todos: [\n                    ...state.todos, \n                    {...action.data, checked: false }\n                ] \n            }\n\n        case actionTypes.TODO_ADD_FAIL:\n            return {\n                ...state,\n                loading: false,\n                error: action.error\n            }\n        \n        case actionTypes.TODO_CHECKED_START:\n            return {...state}\n\n        case actionTypes.TODO_CHECKED_SUCCESS: \n            const todoIndex = state.todos.findIndex(el => el.id === action.id);\n            let copyTodos   = [...state.todos];\n            \n            copyTodos[todoIndex] = {\n                ...copyTodos[todoIndex],\n                checked: !copyTodos[todoIndex].checked\n            }\n\n            return {\n                ...state,\n                loading: false,\n                todos: copyTodos\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\nimport { createStore, combineReducers, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport authReducer from './store/reducers/auth';\nimport todoReducer from './store/reducers/todo';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  todo: todoReducer\n})\n\nconst store = createStore( rootReducer, composeEnhancers(\n  applyMiddleware(thunk)\n) )\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter basename=\"/\">\n          <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}